/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ArchetypeListImport } from './routes/_archetypeList'
import { Route as ArchetypeListWordsImport } from './routes/_archetypeList.words'
import { Route as ArchetypeListMixesImport } from './routes/_archetypeList.mixes'
import { Route as ArchetypeListMicroImport } from './routes/_archetypeList.micro'
import { Route as ArchetypeListLabelsImport } from './routes/_archetypeList.labels'
import { Route as ReadArchetypeIdImport } from './routes/read.$archetype.$id'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()
const ArchetypeIndexLazyImport = createFileRoute('/archetype/')()

// Create/Update Routes

const ArchetypeListRoute = ArchetypeListImport.update({
  id: '/_archetypeList',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ArchetypeIndexLazyRoute = ArchetypeIndexLazyImport.update({
  path: '/archetype/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/archetype.index.lazy').then((d) => d.Route),
)

const ArchetypeListWordsRoute = ArchetypeListWordsImport.update({
  path: '/words',
  getParentRoute: () => ArchetypeListRoute,
} as any)

const ArchetypeListMixesRoute = ArchetypeListMixesImport.update({
  path: '/mixes',
  getParentRoute: () => ArchetypeListRoute,
} as any)

const ArchetypeListMicroRoute = ArchetypeListMicroImport.update({
  path: '/micro',
  getParentRoute: () => ArchetypeListRoute,
} as any)

const ArchetypeListLabelsRoute = ArchetypeListLabelsImport.update({
  path: '/labels',
  getParentRoute: () => ArchetypeListRoute,
} as any)

const ReadArchetypeIdRoute = ReadArchetypeIdImport.update({
  path: '/read/$archetype/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/_archetypeList': {
      id: '/_archetypeList'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ArchetypeListImport
      parentRoute: typeof rootRoute
    }
    '/_archetypeList/labels': {
      id: '/_archetypeList/labels'
      path: '/labels'
      fullPath: '/labels'
      preLoaderRoute: typeof ArchetypeListLabelsImport
      parentRoute: typeof ArchetypeListImport
    }
    '/_archetypeList/micro': {
      id: '/_archetypeList/micro'
      path: '/micro'
      fullPath: '/micro'
      preLoaderRoute: typeof ArchetypeListMicroImport
      parentRoute: typeof ArchetypeListImport
    }
    '/_archetypeList/mixes': {
      id: '/_archetypeList/mixes'
      path: '/mixes'
      fullPath: '/mixes'
      preLoaderRoute: typeof ArchetypeListMixesImport
      parentRoute: typeof ArchetypeListImport
    }
    '/_archetypeList/words': {
      id: '/_archetypeList/words'
      path: '/words'
      fullPath: '/words'
      preLoaderRoute: typeof ArchetypeListWordsImport
      parentRoute: typeof ArchetypeListImport
    }
    '/archetype/': {
      id: '/archetype/'
      path: '/archetype'
      fullPath: '/archetype'
      preLoaderRoute: typeof ArchetypeIndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/read/$archetype/$id': {
      id: '/read/$archetype/$id'
      path: '/read/$archetype/$id'
      fullPath: '/read/$archetype/$id'
      preLoaderRoute: typeof ReadArchetypeIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ArchetypeListRouteChildren {
  ArchetypeListLabelsRoute: typeof ArchetypeListLabelsRoute
  ArchetypeListMicroRoute: typeof ArchetypeListMicroRoute
  ArchetypeListMixesRoute: typeof ArchetypeListMixesRoute
  ArchetypeListWordsRoute: typeof ArchetypeListWordsRoute
}

const ArchetypeListRouteChildren: ArchetypeListRouteChildren = {
  ArchetypeListLabelsRoute: ArchetypeListLabelsRoute,
  ArchetypeListMicroRoute: ArchetypeListMicroRoute,
  ArchetypeListMixesRoute: ArchetypeListMixesRoute,
  ArchetypeListWordsRoute: ArchetypeListWordsRoute,
}

const ArchetypeListRouteWithChildren = ArchetypeListRoute._addFileChildren(
  ArchetypeListRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '': typeof ArchetypeListRouteWithChildren
  '/labels': typeof ArchetypeListLabelsRoute
  '/micro': typeof ArchetypeListMicroRoute
  '/mixes': typeof ArchetypeListMixesRoute
  '/words': typeof ArchetypeListWordsRoute
  '/archetype': typeof ArchetypeIndexLazyRoute
  '/read/$archetype/$id': typeof ReadArchetypeIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '': typeof ArchetypeListRouteWithChildren
  '/labels': typeof ArchetypeListLabelsRoute
  '/micro': typeof ArchetypeListMicroRoute
  '/mixes': typeof ArchetypeListMixesRoute
  '/words': typeof ArchetypeListWordsRoute
  '/archetype': typeof ArchetypeIndexLazyRoute
  '/read/$archetype/$id': typeof ReadArchetypeIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/_archetypeList': typeof ArchetypeListRouteWithChildren
  '/_archetypeList/labels': typeof ArchetypeListLabelsRoute
  '/_archetypeList/micro': typeof ArchetypeListMicroRoute
  '/_archetypeList/mixes': typeof ArchetypeListMixesRoute
  '/_archetypeList/words': typeof ArchetypeListWordsRoute
  '/archetype/': typeof ArchetypeIndexLazyRoute
  '/read/$archetype/$id': typeof ReadArchetypeIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/labels'
    | '/micro'
    | '/mixes'
    | '/words'
    | '/archetype'
    | '/read/$archetype/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/labels'
    | '/micro'
    | '/mixes'
    | '/words'
    | '/archetype'
    | '/read/$archetype/$id'
  id:
    | '__root__'
    | '/'
    | '/_archetypeList'
    | '/_archetypeList/labels'
    | '/_archetypeList/micro'
    | '/_archetypeList/mixes'
    | '/_archetypeList/words'
    | '/archetype/'
    | '/read/$archetype/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ArchetypeListRoute: typeof ArchetypeListRouteWithChildren
  ArchetypeIndexLazyRoute: typeof ArchetypeIndexLazyRoute
  ReadArchetypeIdRoute: typeof ReadArchetypeIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ArchetypeListRoute: ArchetypeListRouteWithChildren,
  ArchetypeIndexLazyRoute: ArchetypeIndexLazyRoute,
  ReadArchetypeIdRoute: ReadArchetypeIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_archetypeList",
        "/archetype/",
        "/read/$archetype/$id"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/_archetypeList": {
      "filePath": "_archetypeList.tsx",
      "children": [
        "/_archetypeList/labels",
        "/_archetypeList/micro",
        "/_archetypeList/mixes",
        "/_archetypeList/words"
      ]
    },
    "/_archetypeList/labels": {
      "filePath": "_archetypeList.labels.tsx",
      "parent": "/_archetypeList"
    },
    "/_archetypeList/micro": {
      "filePath": "_archetypeList.micro.tsx",
      "parent": "/_archetypeList"
    },
    "/_archetypeList/mixes": {
      "filePath": "_archetypeList.mixes.tsx",
      "parent": "/_archetypeList"
    },
    "/_archetypeList/words": {
      "filePath": "_archetypeList.words.tsx",
      "parent": "/_archetypeList"
    },
    "/archetype/": {
      "filePath": "archetype.index.lazy.tsx"
    },
    "/read/$archetype/$id": {
      "filePath": "read.$archetype.$id.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
