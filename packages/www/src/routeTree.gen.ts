/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ArchetypeTypeImport } from './routes/archetype.$type'

// Create Virtual Routes

const MixesLazyImport = createFileRoute('/mixes')()
const MdxLazyImport = createFileRoute('/mdx')()
const IndexLazyImport = createFileRoute('/')()
const ArchetypeIndexLazyImport = createFileRoute('/archetype/')()

// Create/Update Routes

const MixesLazyRoute = MixesLazyImport.update({
  path: '/mixes',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/mixes.lazy').then((d) => d.Route))

const MdxLazyRoute = MdxLazyImport.update({
  path: '/mdx',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/mdx.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ArchetypeIndexLazyRoute = ArchetypeIndexLazyImport.update({
  path: '/archetype/',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/archetype.index.lazy').then((d) => d.Route),
)

const ArchetypeTypeRoute = ArchetypeTypeImport.update({
  path: '/archetype/$type',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/mdx': {
      id: '/mdx'
      path: '/mdx'
      fullPath: '/mdx'
      preLoaderRoute: typeof MdxLazyImport
      parentRoute: typeof rootRoute
    }
    '/mixes': {
      id: '/mixes'
      path: '/mixes'
      fullPath: '/mixes'
      preLoaderRoute: typeof MixesLazyImport
      parentRoute: typeof rootRoute
    }
    '/archetype/$type': {
      id: '/archetype/$type'
      path: '/archetype/$type'
      fullPath: '/archetype/$type'
      preLoaderRoute: typeof ArchetypeTypeImport
      parentRoute: typeof rootRoute
    }
    '/archetype/': {
      id: '/archetype/'
      path: '/archetype'
      fullPath: '/archetype'
      preLoaderRoute: typeof ArchetypeIndexLazyImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/mdx': typeof MdxLazyRoute
  '/mixes': typeof MixesLazyRoute
  '/archetype/$type': typeof ArchetypeTypeRoute
  '/archetype': typeof ArchetypeIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/mdx': typeof MdxLazyRoute
  '/mixes': typeof MixesLazyRoute
  '/archetype/$type': typeof ArchetypeTypeRoute
  '/archetype': typeof ArchetypeIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/mdx': typeof MdxLazyRoute
  '/mixes': typeof MixesLazyRoute
  '/archetype/$type': typeof ArchetypeTypeRoute
  '/archetype/': typeof ArchetypeIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/mdx' | '/mixes' | '/archetype/$type' | '/archetype'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/mdx' | '/mixes' | '/archetype/$type' | '/archetype'
  id: '__root__' | '/' | '/mdx' | '/mixes' | '/archetype/$type' | '/archetype/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  MdxLazyRoute: typeof MdxLazyRoute
  MixesLazyRoute: typeof MixesLazyRoute
  ArchetypeTypeRoute: typeof ArchetypeTypeRoute
  ArchetypeIndexLazyRoute: typeof ArchetypeIndexLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  MdxLazyRoute: MdxLazyRoute,
  MixesLazyRoute: MixesLazyRoute,
  ArchetypeTypeRoute: ArchetypeTypeRoute,
  ArchetypeIndexLazyRoute: ArchetypeIndexLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/mdx",
        "/mixes",
        "/archetype/$type",
        "/archetype/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/mdx": {
      "filePath": "mdx.lazy.tsx"
    },
    "/mixes": {
      "filePath": "mixes.lazy.tsx"
    },
    "/archetype/$type": {
      "filePath": "archetype.$type.tsx"
    },
    "/archetype/": {
      "filePath": "archetype.index.lazy.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
